# -*- coding: utf-8 -*-
"""Rock Paper Scissors Images Classification using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LpWCmQzuoPzHLCp1AEixqdFgms4yvc5_

**Rizky Mahendra Trijayanto**

# **Mengunduh file ke dalam colab**
"""

import tensorflow as tf

#Mengunduh file ke dalam colab
!wget --no-check-certificate \
https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip

"""# **Mengekstrak dataset**"""

import zipfile,os

local_zip = '/content/rockpaperscissors.zip'                                      
zip_ref = zipfile.ZipFile(local_zip, 'r')                                         
zip_ref.extractall('/content/')                                                   
zip_ref.close()

"""# **Melihat jumlah gambar yang ada**"""

print('Total gambar batu:', len(os.listdir('/content/rockpaperscissors/rock')))            #Menampilkan jumlah gambar di dalam folder Gunting
print('Total gambar kertas:', len(os.listdir('/content/rockpaperscissors/paper')))         #Menampilkan jumlah gambar di dalam folder Batu
print('Total gambar gunting:', len(os.listdir('/content/rockpaperscissors/scissors')))     #Menampilkan jumlah gambar di dalam folder Kertas

"""# **Membuat directory baru sebagai directory utama**"""

os.mkdir('/content/rockpaperscissors/data/')

"""# **Menyalin berkas yang ada pada rps-cv-images ke directory data**"""

import shutil

src = '/content/rockpaperscissors/rps-cv-images'
dst = '/content/rockpaperscissors/data/all'

shutil.copytree(src=src,dst=dst)

"""# **Menghapus berkas yang tidak diinginkan**"""

import os

#file name
file = 'README_rpc-cv-images.txt'
    
# File location 
location = '/content/rockpaperscissors/data/all'
    
# Path 
path = os.path.join(location, file) 
    
# Remove the file 
# 'file.txt' 
os.remove(path)

"""# **Melakukan augmentasi**"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator



train_datagen = ImageDataGenerator(
                    rescale = 1./255,                                                          
	    rotation_range=45,                                                                 
      width_shift_range=0.2,                                                      
      height_shift_range=0.2,                                                     
      shear_range=0.2,                                                            
      zoom_range=0.2,                                                             
      horizontal_flip=True,                                                        
      fill_mode='nearest',                                                         
#memecah data validation dan training     
      validation_split=0.4                                                        #60% validation
      )

dir = '/content/rockpaperscissors/data/all'

train_generator = train_datagen.flow_from_directory(                           
	dir,                                                                      
	target_size=(150,150),
  batch_size= 34,                                                          
  class_mode='categorical',                                                       
  shuffle=True,                                                                   
  subset='training'                                                               
  )

validation_generator = train_datagen.flow_from_directory(                      
	dir,                                                                      
	target_size=(150,150),
  batch_size= 34,                                                         
  class_mode='categorical',                                                       
  shuffle=True,
  subset='validation'                                                             
  )

"""# **Melakukan Callback**"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95 and logs.get('val_accuracy')>0.9):
      print("\nAKURASI MENCAPAI 95%")
      self.model.stop_training = True

callbacks = myCallback()

"""# **Membangun Neural Network**"""

model = tf.keras.models.Sequential([                                              #model sequential
                                                                                  
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)), #Layer Konvolusi pertama
    tf.keras.layers.MaxPooling2D(2, 2),
    
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),                         #Layer Konvolusi kedua
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),                         #Layer Konvolusi ketiga
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),                         #Layer Konvolusi keempat
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Flatten(),                                                    
    tf.keras.layers.Dropout(0.5),
                               
    tf.keras.layers.Dense(512, activation='relu'),                                #Hiden layer 512 neuron
    tf.keras.layers.Dense(3, activation='softmax')                                #Layer output
])

model.summary()

from tensorflow.keras.optimizers import RMSprop
# compile model dengan 'rmsprop' optimizer loss function 'categorical_crossentropy' 
model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

"""# **Melatih Model**"""

history=model.fit(
    train_generator,
    steps_per_epoch=39,
    epochs=30,
    validation_data=validation_generator,
    validation_steps=25, 
    verbose=2,
      callbacks=[callbacks]
    )

"""# **Plot Akurasi dan Loss pada Data Training dan Validation**"""

import matplotlib.pyplot as plt

# set untuk accuracy pada training dan validation
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']


# set untuk loss pada training dan validation
loss = history.history['loss']
val_loss = history.history['val_loss']

# Get number of epochs
epochs = range(len(acc))

# Plot training dan validation accuracy per epoch
plt.plot(epochs, acc, 'g', label='Training Accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation Accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0) 
plt.figure()

# Plot training dan validation loss per epoch
plt.plot(epochs, loss, 'g', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and validation loss')
plt.legend(loc=0) 
plt.figure()

"""# **Uji Coba Klasifikasi Gambar**"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)

  if classes[0,0]!=0:
    print('Tangan Anda menunjukkan kertas')
  elif classes[0,1]!=0:
    print('Tangan Anda menunjukkan batu')
  else:
    print('Tangan Anda menunjukkan gunting')